class Solution {
    public int singleNumber(int[] nums) {
     //Approach 1:
       //Sort the array : 
       //Time complexity: O(nlogn) space complexity : O(1)
        /*
        Arrays.sort(nums);
        for(int i = 0;i < nums.length-2;i+=2){
            if(nums[i] != nums[i+1]){
                return nums[i];
            }
        }
        return nums[nums.length-1];
        */
        
        //Approach 2: 
        //Using hashmap: Time complexity : 0(n)  Space complexity : O(n)
        /*
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : nums){
            if(map.containsKey(i)){
                map.put(i, map.get(i)+1);
            }
            else{
                map.put(i, 1);
            }
        }
        for(int i : nums){
            if(map.get(i) == 1){
                return i;
            }
        }
        return -1;
        */
        
        //Approach 3:
        //Using XOR: Time complexity : O(n)  Space complexity: O(1)
        /*
        int ans = nums[0];
        for(int i = 1;i < nums.length;i++){
            ans = ans^nums[i];
        }
        return ans;
        */
    }
}
